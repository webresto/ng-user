import { Injectable } from '@angular/core';
import { NetService } from '@webresto/ng-core';
import { BehaviorSubject } from 'rxjs';
import { filter, switchMap, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@webresto/ng-core";
const LS_TOKEN_NAME = 'gf:tkn:v2';
export class NgRestoUserService {
    constructor(net) {
        this.net = net;
        this.authToken = localStorage.getItem(LS_TOKEN_NAME);
        this.rememberMe = false;
        this.isLoggedIn = new BehaviorSubject(this.authToken ? true : false);
        this.historyItems = new BehaviorSubject([]);
        this.historyTransactions = new BehaviorSubject([]);
        const isLoggedSubscription = this.isLoggedIn.pipe(filter(isLoggedIn => !!isLoggedIn), switchMap(() => this.getFavorites()), switchMap(() => this.getProfile()), switchMap(() => this.getAddresses()), switchMap(() => this.getBonuses())).subscribe(() => { }, () => { }, () => isLoggedSubscription.unsubscribe());
    }
    signIn(data, rememberMe = false) {
        this.rememberMe = rememberMe;
        return this.net.post('/signin', data).pipe(tap((result) => {
            this.setAuthToken(result.token);
            this.user.next(result.user);
            this.isLoggedIn.next(true);
        }, () => { }));
    }
    getProfile() {
        return this.user ? this.user : this.net.get('/user/get/user-info').pipe(switchMap(result => {
            this.user = new BehaviorSubject(result);
            return this.user;
        }));
    }
    getHistory() {
        return this.net.get('/user/get/history').pipe(tap((historyItems) => {
            this.historyItems.next(historyItems);
        }, error => {
            if ((error === null || error === void 0 ? void 0 : error.type) === "Unauthorized") {
                this.deleteAuthToken();
            }
            ;
        }));
    }
    getHistoryTransactions(bonusSystem = "local", limit = 15, set = 0) {
        return this.net.get(`/bonus/transactions?bonussystem=${bonusSystem}&limit=${limit}&number=${set}`).pipe(tap((transactions) => {
            this.historyTransactions.next(transactions);
        }, () => { }));
    }
    updateProfile(data) {
        return this.net.post('/user/set/user-info', {
            user: data
        }).pipe(tap((result) => {
            this.user.next(result.user);
        }, () => { }));
    }
    getAddresses() {
        return this.addresses ? this.addresses : this.net.get('/user/get/location').pipe(switchMap(addresses => {
            this.addresses = new BehaviorSubject(addresses);
            return this.addresses;
        }));
    }
    addAddress(address) {
        return this.net.post('/user/add/location', address).pipe(switchMap(addresses => {
            this.addresses.next(addresses);
            return this.addresses;
        }));
    }
    deleteAddress(address) {
        return this.net.post('/user/remove/location', {
            id: address.id,
            street: address.street,
            home: address.home
        }).pipe(tap((addresses) => {
            this.addresses.next(addresses);
        }, () => { }));
    }
    signUp(data) {
        return this.net.post('/signup', data).pipe(tap(() => {
            //this.setAuthToken(result.token, false);
            //this.user.next(result.user);
        }, () => { }));
    }
    signOut() {
        return this.deleteAuthToken();
    }
    getBonuses() {
        return this.bonusSystems ? this.bonusSystems : this.net.post('/bonus/get', {}).pipe(switchMap(result => {
            this.bonusSystems = new BehaviorSubject(result);
            return this.bonusSystems;
        }));
    }
    resetPassword(data) {
        return this.net.post('/reset', data).pipe(tap(() => { }, () => { }));
    }
    resetPasswordCode(data) {
        return this.net.post('/code', data).pipe(tap(() => { }, () => { }));
    }
    getFavorites() {
        return this.favorites ? this.favorites : this.net.get('/user/get/favorites').pipe(switchMap(result => {
            console.info('getFavorites result', result);
            this.favorites = new BehaviorSubject(result);
            return this.favorites;
        }));
    }
    addDishToFavorites(dish) {
        return this.net.post('/user/add/favorites ', {
            dishId: dish.id
        }).pipe(tap(result => this.favorites.next(result), () => { }));
    }
    removeDishFromFavorites(dish) {
        return this.net.post('/user/remove/favorites ', {
            dishId: dish.id
        }).pipe(tap(result => {
            console.info('Было=>>>', this.favorites.getValue().length);
            let favoritesUpdated = this.favorites
                .getValue()
                .filter(item => item.id != dish.id);
            console.info('Стало=>>>', favoritesUpdated.length);
            this.favorites.next(result);
        }, () => { }));
    }
    userProfile() {
        return !!this.user.value ? this.user : this.getProfile().pipe(switchMap(() => this.getProfile()), switchMap(() => this.getFavorites()), switchMap(() => this.getAddresses()), switchMap(() => this.getBonuses()), switchMap(() => this.user));
    }
    userIsLoggedIn() {
        return this.isLoggedIn;
    }
    userFavorites() {
        return this.favorites.pipe();
    }
    userAddresses() {
        return this.addresses.pipe();
    }
    userHistory() {
        return this.historyItems.pipe();
    }
    userTransactionsHistory() {
        return this.historyTransactions.pipe();
    }
    getAuthToken() {
        return this.authToken;
    }
    setAuthToken(authToken) {
        if (this.rememberMe) {
            localStorage.setItem(LS_TOKEN_NAME, authToken);
        }
        ;
        this.authToken = authToken;
        this.isLoggedIn.next(true);
        /*if(updateProfile) {
          this.getProfile().subscribe();
          this.getFavorites().subscribe();
          this.getAddresses().subscribe();
          this.getHistory().subscribe();
        }*/
    }
    deleteAuthToken() {
        this.authToken = null;
        localStorage.removeItem(LS_TOKEN_NAME);
        this.isLoggedIn.next(false);
    }
    saveAvatar(avatar) {
        const data = new FormData();
        data.append('avatar', avatar, avatar.name);
        return this.net.post('/user/avatar/upload', data, true, {
            headers: { 'Content-Type': 'multipart/form-data' },
        }).pipe(tap(result => this.user.next(result.user), () => { }));
    }
}
NgRestoUserService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgRestoUserService_Factory() { return new NgRestoUserService(i0.ɵɵinject(i1.NetService)); }, token: NgRestoUserService, providedIn: "root" });
NgRestoUserService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NgRestoUserService.ctorParameters = () => [
    { type: NetService }
];
//# sourceMappingURL=data:application/json;base64,