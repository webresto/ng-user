import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { filter, switchMap, tap } from 'rxjs/operators';
import { EventMessage } from '@webresto/ng-core';
import * as i0 from "@angular/core";
import * as i1 from "@webresto/ng-core";
const LS_TOKEN_NAME = 'gf:tkn:v2';
export class NgRestoUserService {
    constructor(
    //private restoStorageService:RestoStorageService,
    net, eventer) {
        this.net = net;
        this.eventer = eventer;
        this.authToken = localStorage.getItem(LS_TOKEN_NAME);
        this.rememberMe = false;
        this.user = new BehaviorSubject({});
        this.isLoggedIn = new BehaviorSubject(this.authToken ? true : false);
        this.favorites = new BehaviorSubject([]);
        this.addresses = new BehaviorSubject([]);
        this.historyItems = new BehaviorSubject([]);
        this.historyTransactions = new BehaviorSubject([]);
        this.bonusSystems = new BehaviorSubject([]);
        this.isLoggedSubscription = this.isLoggedIn.pipe(filter(isLoggedIn => isLoggedIn === true), switchMap(() => this.getFavorites()), switchMap(() => this.getProfile()), switchMap(() => this.getAddresses()), switchMap(() => this.getBonuses()), switchMap(() => this.getHistory())).subscribe(() => { }, () => { }, () => this.isLoggedSubscription.unsubscribe());
    }
    signIn(data, rememberMe = false) {
        this.rememberMe = rememberMe;
        return this.net.post('/signin', data).pipe(tap((result) => {
            this.setAuthToken(result.token);
            this.user.next(result.user);
            this.isLoggedIn.next(true);
            this.eventer.emitMessageEvent(new EventMessage('success', 'Успех', 'Успешно авторизирован'));
        }, error => this.eventer.emitMessageEvent(new EventMessage('error', 'Ошибка', error))));
    }
    getProfile() {
        return this.net.get('/user/get/user-info').pipe(tap((result) => {
            this.user.next(result);
        }, error => this.eventer.emitMessageEvent(new EventMessage('error', 'Ошибка', error))));
    }
    getHistory() {
        return this.net.get('/user/get/history').pipe(tap((historyItems) => {
            this.historyItems.next(historyItems);
        }, error => {
            const message = new EventMessage('error', 'Ошибка', error);
            this.eventer.emitMessageEvent(message);
            if (message.type === "Unauthorized") {
                this.deleteAuthToken();
            }
            ;
        }));
    }
    getHistoryTransactions(bonusSystem = "local", limit = 15, set = 0) {
        return this.net.get(`/bonus/transactions?bonussystem=${bonusSystem}&limit=${limit}&number=${set}`).pipe(tap((transactions) => {
            this.historyTransactions.next(transactions);
        }, error => this.eventer.emitMessageEvent(new EventMessage('error', 'Ошибка', error))));
    }
    updateProfile(data) {
        return this.net.post('/user/set/user-info', {
            user: data
        }).pipe(tap((result) => {
            this.user.next(result);
        }, error => this.eventer.emitMessageEvent(new EventMessage('error', 'Ошибка', error))));
    }
    getAddresses() {
        return this.net.get('/user/get/location').pipe(tap((addresses) => {
            this.addresses.next(addresses);
        }, error => this.eventer.emitMessageEvent(new EventMessage('error', 'Ошибка', error))));
    }
    addAddress(address) {
        return this.net.post('/user/add/location', address).pipe(tap((addresses) => {
            this.addresses.next(addresses);
        }, error => this.eventer.emitMessageEvent(new EventMessage('error', 'Ошибка', error))));
    }
    deleteAddress(address) {
        var reqBody = {
            id: address.id,
            street: address.street,
            home: address.home
        };
        return this.net.post('/user/remove/location', reqBody).pipe(tap((addresses) => {
            this.addresses.next(addresses);
        }, error => this.eventer.emitMessageEvent(new EventMessage('error', 'Ошибка', error))));
    }
    signUp(data) {
        return this.net.post('/signup', data).pipe(tap((result) => {
            //this.setAuthToken(result.token, false);
            //this.user.next(result.user);
            this.eventer.emitMessageEvent(new EventMessage('success', 'Регистрация', 'Ваш пароль был отправлен на указанный номер телефона. Он будет действовать на постоянной основе'));
        }, error => {
            this.eventer.emitMessageEvent(new EventMessage('error', 'Ошибка', error));
        }));
    }
    signOut() {
        return this.deleteAuthToken();
    }
    getBonuses() {
        return this.net.post('/bonus/get', {}).pipe(tap((result) => {
            this.bonusSystems.next(result);
        }, error => this.eventer.emitMessageEvent(new EventMessage('error', 'Ошибка', error))));
    }
    resetPassword(data) {
        return this.net.post('/reset', data).pipe(tap((result) => {
        }, error => this.eventer.emitMessageEvent(new EventMessage('error', 'Ошибка', error))));
    }
    resetPasswordCode(data) {
        return this.net.post('/code', data).pipe(tap((result) => {
        }, error => this.eventer.emitMessageEvent(new EventMessage('error', 'Ошибка', error))));
    }
    getFavorites() {
        return this.net.get('/user/get/favorites').pipe(tap((result) => {
            console.info('getFavorites result', result);
            this.favorites.next(result);
        }, error => this.eventer.emitMessageEvent(new EventMessage('error', 'Ошибка', error))));
    }
    addDishToFavorites(dish) {
        let data = {
            dishId: dish.id
        };
        return this.net.post('/user/add/favorites ', data).pipe(tap(result => {
            let favoritesUpdated = this.favorites.getValue();
            favoritesUpdated.push(dish);
            this.favorites.next(result);
        }, error => this.eventer.emitMessageEvent(new EventMessage('error', 'Ошибка', error))));
    }
    removeDishFromFavorites(dish) {
        let data = {
            dishId: dish.id
        };
        return this.net.post('/user/remove/favorites ', data).pipe(tap((result) => {
            console.info('Было=>>>', this.favorites.getValue().length);
            let favoritesUpdated = this.favorites
                .getValue()
                .filter(item => item.id != dish.id);
            console.info('Стало=>>>', favoritesUpdated.length);
            this.favorites.next(result);
        }, error => this.eventer.emitMessageEvent(new EventMessage('error', 'Ошибка', error))));
    }
    userProfile() {
        return this.user.pipe();
    }
    userIsLoggedIn() {
        return this.isLoggedIn.pipe();
    }
    userFavorites() {
        return this.favorites.pipe();
    }
    userAddresses() {
        return this.addresses.pipe();
    }
    userHistory() {
        return this.historyItems.pipe();
    }
    userTransactionsHistory() {
        return this.historyTransactions.pipe();
    }
    getAuthToken() {
        return this.authToken;
    }
    setAuthToken(authToken) {
        if (this.rememberMe) {
            localStorage.setItem(LS_TOKEN_NAME, authToken);
        }
        ;
        this.authToken = authToken;
        this.isLoggedIn.next(true);
        /*if(updateProfile) {
          this.getProfile().subscribe();
          this.getFavorites().subscribe();
          this.getAddresses().subscribe();
          this.getHistory().subscribe();
        }*/
    }
    deleteAuthToken() {
        this.authToken = null;
        localStorage.removeItem(LS_TOKEN_NAME);
        this.isLoggedIn.next(false);
    }
}
NgRestoUserService.ɵfac = function NgRestoUserService_Factory(t) { return new (t || NgRestoUserService)(i0.ɵɵinject(i1.NetService), i0.ɵɵinject(i1.EventerService)); };
NgRestoUserService.ɵprov = i0.ɵɵdefineInjectable({ token: NgRestoUserService, factory: NgRestoUserService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(NgRestoUserService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.NetService }, { type: i1.EventerService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,