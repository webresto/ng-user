{"version":3,"sources":["../../projects/webresto/ng-user/src/lib/services/ng-resto-user.service.ts","../../projects/webresto/ng-user/src/lib/directives/sign-up.directive.ts","../../projects/webresto/ng-user/src/lib/directives/sign-in.directive.ts","../../projects/webresto/ng-user/src/lib/directives/sign-out.directive.ts","../../projects/webresto/ng-user/src/lib/directives/reset-password.directive.ts","../../projects/webresto/ng-user/src/lib/directives/reset-password-code.directive.ts","../../projects/webresto/ng-user/src/lib/directives/balance.directive.ts","../../projects/webresto/ng-user/src/lib/directives/toggle-dish-to-favorites.directive.ts","../../projects/webresto/ng-user/src/lib/directives/update-profile.directive.ts","../../projects/webresto/ng-user/src/lib/directives/add-address.directive.ts","../../projects/webresto/ng-user/src/lib/directives/delete-address.directive.ts","../../projects/webresto/ng-user/src/lib/ng-user.module.ts"],"names":["LS_TOKEN_NAME","NgRestoUserService","net","_this","this","authToken","localStorage","getItem","rememberMe","isLoggedIn","BehaviorSubject","historyItems","historyTransactions","isLoggedSubscription","pipe","filter","switchMap","getFavorites","getProfile","getAddresses","getBonuses","subscribe","unsubscribe","prototype","signIn","data","post","tap","result","setAuthToken","token","user","next","get","getHistory","error","type","deleteAuthToken","getHistoryTransactions","bonusSystem","limit","set","transactions","updateProfile","addresses","addAddress","address","deleteAddress","id","street","home","signUp","signOut","bonusSystems","resetPassword","resetPasswordCode","favorites","console","info","addDishToFavorites","dish","dishId","removeDishFromFavorites","getValue","length","favoritesUpdated","item","userProfile","userIsLoggedIn","userFavorites","asObservable","of","userAddresses","userHistory","userTransactionsHistory","getAuthToken","setItem","removeItem","saveAvatar","avatar","FormData","append","name","headers","Content-Type","Injectable","args","providedIn","NetService","SignUpDirective","ngRestoUserService","success","EventEmitter","onClick","phone","preparePhone","email","password","captcha","emit","replace","Directive","selector","Input","Output","HostListener","SignInDirective","SignOutDirective","ResetPasswordDirective","ResetPasswordCodeDirective","userId","code","renderer","el","balance","bonuses","state","amount","setProperty","nativeElement","Renderer2","ElementRef","ToggleDishToFavoritesDirective","element","change","ngOnDestroy","forEach","emitter","complete","ngOnInit","inFavorites","find","addClass","removeClass","req","UpdateProfileDirective","additionalInfo","birthday","formatDate","AddAddressDirective","streetId","housing","index","entrance","floor","apartment","doorphone","DeleteAddressDirective","NgModule","imports","providers","declarations","BalanceDirective","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { NetService } from '@webresto/ng-core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { filter, switchMap, tap } from 'rxjs/operators';\r\nimport {\r\n  Address, SignInRequestData, SignInResponseData, User, UpdateProfileRequestData,\r\n  UpdateProfileResponseData, AddAddressRequestData, RemoveAddressRequestData, SignUpRequestData,\r\n  ResetPasswordRequestData, ResetPasswordCodeRequestData,\r\n  AddDishToFavoritesRequestData, RemoveDishFromFavoritesRequestData\r\n} from '../../models';\r\n\r\nconst LS_TOKEN_NAME = 'gf:tkn:v2';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgRestoUserService {\r\n\r\n  private authToken: string = localStorage.getItem(LS_TOKEN_NAME);\r\n  private rememberMe: boolean = false;\r\n  private user: BehaviorSubject<User>;\r\n  private isLoggedIn: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(this.authToken ? true : false);\r\n  private favorites: BehaviorSubject<any[]>;\r\n  private addresses: BehaviorSubject<Address[]>;\r\n  private historyItems: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n  private historyTransactions: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n  private bonusSystems: BehaviorSubject<any[]>;\r\n\r\n  constructor(private net: NetService) {\r\n    const isLoggedSubscription = this.isLoggedIn.pipe(\r\n      filter(isLoggedIn => !!isLoggedIn),\r\n      switchMap(() => this.getFavorites()),\r\n      switchMap(() => this.getProfile()),\r\n      switchMap(() => this.getAddresses()),\r\n      switchMap(() => this.getBonuses()),\r\n    ).subscribe(() => { }, () => { }, () => isLoggedSubscription.unsubscribe()\r\n    );\r\n  }\r\n\r\n  signIn(data: SignInRequestData, rememberMe: boolean = false) {\r\n\r\n    this.rememberMe = rememberMe;\r\n\r\n    return this.net.post('/signin', data).pipe(\r\n      tap(\r\n        (result: SignInResponseData) => {\r\n          this.setAuthToken(result.token);\r\n          this.user.next(result.user);\r\n          this.isLoggedIn.next(true);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n\r\n  }\r\n\r\n  getProfile() {\r\n    return this.user ? this.user : this.net.get<User>('/user/get/user-info').pipe(\r\n      switchMap(\r\n        result => {\r\n          this.user = new BehaviorSubject(result);\r\n          return this.user;\r\n        })\r\n    );\r\n  }\r\n\r\n  getHistory() {\r\n    return this.net.get('/user/get/history').pipe(\r\n      tap(\r\n        (historyItems) => {\r\n          this.historyItems.next(historyItems);\r\n        },\r\n        error => {\r\n          if (error?.type === \"Unauthorized\") {\r\n            this.deleteAuthToken();\r\n          };\r\n        })\r\n    );\r\n  }\r\n\r\n  getHistoryTransactions(bonusSystem: string = \"local\", limit: number = 15, set: number = 0) {\r\n    return this.net.get(`/bonus/transactions?bonussystem=${bonusSystem}&limit=${limit}&number=${set}`).pipe(\r\n      tap(\r\n        (transactions) => {\r\n          this.historyTransactions.next(transactions);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  updateProfile(data: UpdateProfileRequestData) {\r\n    return this.net.post('/user/set/user-info', {\r\n      user: data\r\n    }).pipe(\r\n      tap(\r\n        (result: UpdateProfileResponseData) => {\r\n          this.user.next(result.user);\r\n        },\r\n        () => { }\r\n      )\r\n    )\r\n  }\r\n\r\n  getAddresses() {\r\n    return this.addresses ? this.addresses : this.net.get<Address[]>('/user/get/location').pipe(\r\n      switchMap(\r\n        addresses => {\r\n          this.addresses = new BehaviorSubject(addresses);\r\n          return this.addresses;\r\n        })\r\n    );\r\n  }\r\n\r\n  addAddress(address: AddAddressRequestData) {\r\n    return this.net.post<AddAddressRequestData, Address[]>('/user/add/location', address).pipe(\r\n      switchMap(\r\n        addresses => {\r\n          this.addresses.next(addresses);\r\n          return this.addresses;\r\n        })\r\n    );\r\n  }\r\n\r\n  deleteAddress(address: Address) {\r\n    return this.net.post<RemoveAddressRequestData, Address[]>('/user/remove/location', {\r\n      id: address.id,\r\n      street: address.street,\r\n      home: address.home\r\n    }).pipe(\r\n      tap(\r\n        (addresses: Address[]) => {\r\n          this.addresses.next(addresses);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  signUp(data: SignUpRequestData) {\r\n    return this.net.post('/signup', data).pipe(\r\n      tap(\r\n        () => {\r\n          //this.setAuthToken(result.token, false);\r\n          //this.user.next(result.user);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  signOut() {\r\n    return this.deleteAuthToken();\r\n  }\r\n\r\n\r\n  getBonuses() {\r\n    return this.bonusSystems ? this.bonusSystems : this.net.post('/bonus/get', {}).pipe(\r\n      switchMap(\r\n        result => {\r\n          this.bonusSystems = new BehaviorSubject(result);\r\n          return this.bonusSystems;\r\n        })\r\n    );\r\n  }\r\n\r\n  resetPassword(data: ResetPasswordRequestData) {\r\n    return this.net.post('/reset', data).pipe(\r\n      tap(\r\n        () => { },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  resetPasswordCode(data: ResetPasswordCodeRequestData) {\r\n    return this.net.post('/code', data).pipe(\r\n      tap(\r\n        () => { },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n\r\n  getFavorites() {\r\n    return this.favorites ? this.favorites : this.net.get<any[]>('/user/get/favorites').pipe(\r\n      switchMap(\r\n        result => {\r\n          console.info('getFavorites result', result);\r\n          this.favorites = new BehaviorSubject(result);\r\n          return this.favorites;\r\n        })\r\n    );\r\n  }\r\n\r\n  addDishToFavorites(dish: any) {\r\n    return this.net.post<AddDishToFavoritesRequestData, any[]>('/user/add/favorites ', {\r\n      dishId: dish.id\r\n    }).pipe(\r\n      tap(\r\n        result => this.favorites.next(result),\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  removeDishFromFavorites(dish: any) {\r\n    return this.net.post<RemoveDishFromFavoritesRequestData, any[]>('/user/remove/favorites ', {\r\n      dishId: dish.id\r\n    }).pipe(\r\n      tap(\r\n        result => {\r\n          console.info('Было=>>>', this.favorites.getValue().length);\r\n          let favoritesUpdated: any[] = this.favorites\r\n            .getValue()\r\n            .filter(item => item.id != dish.id);\r\n          console.info('Стало=>>>', favoritesUpdated.length);\r\n          this.favorites.next(result);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  userProfile(): Observable<User> {\r\n    return this.user ? this.user : this.getProfile().pipe(\r\n      switchMap(() => this.getFavorites()),\r\n      switchMap(() => this.getAddresses()),\r\n      switchMap(() => this.getBonuses()),\r\n      switchMap(() => this.user)\r\n    );\r\n  }\r\n\r\n  userIsLoggedIn(): BehaviorSubject<boolean> {\r\n    return this.isLoggedIn;\r\n  }\r\n\r\n  userFavorites(): Observable<any[]> {\r\n    return this.favorites ? this.favorites.asObservable() : of([]);\r\n  }\r\n\r\n  userAddresses(): Observable<Address[]> {\r\n    return this.addresses ? this.addresses.asObservable() : of([]);\r\n  }\r\n\r\n  userHistory(): Observable<any[]> {\r\n    return this.historyItems ? this.historyItems.asObservable() : of([]);\r\n  }\r\n\r\n  userTransactionsHistory(): Observable<any[]> {\r\n    return this.historyTransactions ? this.historyTransactions.asObservable() : of([]);\r\n  }\r\n\r\n  getAuthToken(): string {\r\n    return this.authToken;\r\n  }\r\n\r\n  setAuthToken(authToken: string): void {\r\n    if (this.rememberMe) {\r\n      localStorage.setItem(LS_TOKEN_NAME, authToken);\r\n    };\r\n    this.authToken = authToken;\r\n    this.isLoggedIn.next(true);\r\n    /*if(updateProfile) {\r\n      this.getProfile().subscribe();\r\n      this.getFavorites().subscribe();\r\n      this.getAddresses().subscribe();\r\n      this.getHistory().subscribe();\r\n    }*/\r\n  }\r\n\r\n  deleteAuthToken(): void {\r\n    this.authToken = null;\r\n    localStorage.removeItem(LS_TOKEN_NAME);\r\n    this.isLoggedIn.next(false);\r\n  }\r\n\r\n  saveAvatar(avatar: File) {\r\n    const data = new FormData();\r\n    data.append('avatar', avatar, avatar.name);\r\n    return this.net.post('/user/avatar/upload', data, true, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    }).pipe(\r\n      tap(\r\n        result => this.user.next(result.user),\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { SignUpRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstSignUp]'\r\n})\r\nexport class SignUpDirective {\r\n\r\n  @Input() name:string;\r\n  @Input() phone:string;\r\n  @Input() email:string;\r\n  @Input() password:string;\r\n  @Input() captcha:string;\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:SignUpRequestData = {\r\n      name: this.name,\r\n      phone: this.preparePhone(this.phone),\r\n      email: this.email,\r\n      password: this.password,\r\n      captcha: this.captcha\r\n    };\r\n    this.ngRestoUserService\r\n      .signUp(data)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n\r\n  preparePhone(phone) {\r\n    phone = '+' + phone.replace(/[^0-9]/gim,'');\r\n    return phone.replace('+8', '');\r\n  }\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { SignInRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstSignIn]'\r\n})\r\nexport class SignInDirective {\r\n\r\n  @Input() phone:string;\r\n  @Input() password:string;\r\n  @Input() captcha:string;\r\n  @Input() rememberMe:boolean;\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:SignInRequestData = {\r\n      phone: this.preparePhone(this.phone),\r\n      password: this.password,\r\n      captcha: this.captcha\r\n    };\r\n    this.ngRestoUserService\r\n      .signIn(data, this.rememberMe)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      )\r\n  }\r\n\r\n  preparePhone(phone) {\r\n    phone = '+' + phone.replace(/[^0-9]/gim,'');\r\n    return phone.replace('+8', '');\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstSignOut]'\r\n})\r\nexport class SignOutDirective {\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    this.ngRestoUserService.signOut();\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ResetPasswordRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstResetPassword]'\r\n})\r\nexport class ResetPasswordDirective {\r\n\r\n  @Input() phone:string;\r\n  @Input() captcha:string;\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:ResetPasswordRequestData = {\r\n      phone: this.phone,\r\n      captcha: this.captcha\r\n    };\r\n    this.ngRestoUserService\r\n      .resetPassword(data)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ResetPasswordCodeRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstResetPasswordCode]'\r\n})\r\nexport class ResetPasswordCodeDirective {\r\n\r\n  @Input() userId:string;\r\n  @Input() code:string;\r\n  @Input() password:string;\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:ResetPasswordCodeRequestData = {\r\n      userId: this.userId,\r\n      code: this.code,\r\n      password: this.password\r\n    };\r\n    this.ngRestoUserService\r\n      .resetPasswordCode(data)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n\r\n}\r\n","import { Directive, Renderer2, ElementRef } from '@angular/core';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstBalance]'\r\n})\r\nexport class BalanceDirective {\r\n\r\n  amount:string;\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private el: ElementRef,\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) {\r\n    let balance = 0;\r\n    this.ngRestoUserService\r\n      .getBonuses()\r\n      .subscribe(bonuses => {\r\n        for(let name in bonuses) {\r\n          const data = bonuses[name];\r\n          if(data.state == 'active') {\r\n            balance += data.balance;\r\n          }\r\n        }\r\n\r\n        this.amount = `${balance}`;\r\n        this.renderer.setProperty(this.el.nativeElement, 'innerHTML', this.amount);\r\n      });\r\n\r\n  }\r\n\r\n}\r\n","import {\r\n  Directive, HostListener, Input,\r\n  Output, EventEmitter, ElementRef, Renderer2, OnDestroy\r\n} from '@angular/core';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstToggleDishToFavorites]'\r\n})\r\nexport class ToggleDishToFavoritesDirective implements OnDestroy {\r\n\r\n  @Input() dish: any;\r\n  @Output() change = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  inFavorites: boolean;\r\n  isLoggedIn: boolean;\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService,\r\n    private element: ElementRef,\r\n    private renderer: Renderer2\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    [this.change, this.error].forEach(emitter => emitter.complete());\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.ngRestoUserService\r\n      .userFavorites()\r\n      .subscribe(favorites => {\r\n\r\n        this.inFavorites = favorites.find(dish => dish.id == this.dish.id);\r\n\r\n        if (this.inFavorites) {\r\n          this.renderer.addClass(this.element.nativeElement, 'selected')\r\n        } else {\r\n          this.renderer.removeClass(this.element.nativeElement, 'selected');\r\n        }\r\n      });\r\n    this.ngRestoUserService\r\n      .userIsLoggedIn()\r\n      .subscribe(result => this.isLoggedIn = result);\r\n  }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    if (this.inFavorites) {\r\n      this.removeDishFromFavorites();\r\n    } else {\r\n      this.addDishToFavorites();\r\n    }\r\n  }\r\n\r\n  addDishToFavorites() {\r\n    this.ngRestoUserService\r\n      .addDishToFavorites(this.dish)\r\n      .subscribe(\r\n        () => {\r\n          this.change.emit(true);\r\n          this.renderer.addClass(this.element.nativeElement, 'selected');\r\n        },\r\n        error => this.error.emit(error)\r\n      )\r\n  }\r\n\r\n  removeDishFromFavorites() {\r\n    const req = this.ngRestoUserService.removeDishFromFavorites(this.dish).subscribe(\r\n      () => {\r\n        this.change.emit(false);\r\n        this.renderer.removeClass(this.element.nativeElement, 'selected');\r\n      },\r\n      error => this.error.emit(error),\r\n      () => req.unsubscribe()\r\n    )\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { UpdateProfileRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\nimport { formatDate } from '@angular/common';\r\n\r\n@Directive({\r\n  selector: '[rstUpdateProfile]'\r\n})\r\nexport class UpdateProfileDirective {\r\n\r\n  @Input() name:string;\r\n  @Input() phone:string;\r\n  @Input() email:string;\r\n  @Input() additionalInfo:string;\r\n  @Input() birthday:string;\r\n\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:UpdateProfileRequestData = {\r\n      name: this.name,\r\n      //phone: this.phone,\r\n      email: this.email,\r\n      additionalInfo:this.additionalInfo,\r\n      birthday:this.birthday ? formatDate(this.birthday,'yyyy-MM-dd','en') : this.birthday\r\n    };\r\n    this.ngRestoUserService\r\n      .updateProfile(data)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { AddAddressRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstAddAddress]'\r\n})\r\nexport class AddAddressDirective {\r\n\r\n  @Input() street: string;     //required\r\n  @Input() streetId: string;     //required\r\n  @Input() home: string;       //required\r\n  @Input() name: string;\r\n  @Input() housing: string;\r\n  @Input() index: string;\r\n  @Input() entrance: string;\r\n  @Input() floor: string;\r\n  @Input() apartment: string;\r\n  @Input() doorphone: string;\r\n\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    if (!this.street) {\r\n      this.error.emit('Необходимо указать улицу'); return;\r\n    }\r\n    if (!this.streetId) {\r\n      this.error.emit('Необходимо указать streetId'); return;\r\n    }\r\n    if (!this.home) {\r\n      this.error.emit('Необходимо указать номер дома'); return;\r\n    }\r\n\r\n    let data: AddAddressRequestData = {\r\n      street: this.street,\r\n      streetId: this.streetId,\r\n      home: this.home,\r\n      name: this.name || '',\r\n      housing: this.housing || '',\r\n      index: this.index || '',\r\n      entrance: this.entrance || '',\r\n      floor: this.floor || '',\r\n      apartment: this.apartment || '',\r\n      doorphone: this.doorphone || ''\r\n    };\r\n    const req = this.ngRestoUserService.addAddress(data).subscribe(\r\n      () => this.success.emit(true),\r\n      error => this.error.emit(error),\r\n      () => req.unsubscribe()\r\n    );\r\n  }\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Address } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstDeleteAddress]'\r\n})\r\nexport class DeleteAddressDirective {\r\n\r\n  @Input() address:Address;\r\n\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    this.ngRestoUserService\r\n      .deleteAddress(this.address)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SignUpDirective } from './directives/sign-up.directive';\r\nimport { SignInDirective } from './directives/sign-in.directive';\r\nimport { SignOutDirective } from './directives/sign-out.directive';\r\nimport { ResetPasswordDirective } from './directives/reset-password.directive';\r\nimport { ResetPasswordCodeDirective } from './directives/reset-password-code.directive';\r\nimport { BalanceDirective } from './directives/balance.directive';\r\nimport { ToggleDishToFavoritesDirective } from './directives/toggle-dish-to-favorites.directive';\r\nimport { UpdateProfileDirective } from './directives/update-profile.directive';\r\nimport { AddAddressDirective } from \"./directives/add-address.directive\";\r\nimport { DeleteAddressDirective } from \"./directives/delete-address.directive\";\r\n\r\n@NgModule({\r\n  imports: [],\r\n  providers: [],\r\n  declarations: [\r\n    SignUpDirective,\r\n    SignInDirective,\r\n    SignOutDirective,\r\n    ResetPasswordDirective,\r\n    ResetPasswordCodeDirective,\r\n    BalanceDirective,\r\n    ToggleDishToFavoritesDirective,\r\n    UpdateProfileDirective,\r\n    AddAddressDirective,\r\n    DeleteAddressDirective\r\n  ],\r\n  exports: [\r\n    SignUpDirective,\r\n    SignInDirective,\r\n    SignOutDirective,\r\n    ResetPasswordDirective,\r\n    ResetPasswordCodeDirective,\r\n    BalanceDirective,\r\n    ToggleDishToFavoritesDirective,\r\n    UpdateProfileDirective,\r\n    AddAddressDirective,\r\n    DeleteAddressDirective\r\n  ]\r\n})\r\nexport class NgUserModule { }\r\n"]}