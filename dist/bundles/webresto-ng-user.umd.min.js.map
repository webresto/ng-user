{"version":3,"sources":["../esm2015/projects/webresto/ng-user/src/lib/services/ng-resto-user.service.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/sign-up.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/sign-in.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/sign-out.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/reset-password.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/reset-password-code.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/balance.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/toggle-dish-to-favorites.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/update-profile.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/add-address.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/delete-address.directive.ts","../projects/webresto/ng-user/src/lib/ng-user.module.ts"],"names":["LS_TOKEN_NAME","NgRestoUserService","net","_this","this","authToken","localStorage","getItem","rememberMe","user","BehaviorSubject","isLoggedIn","favorites","addresses","historyItems","historyTransactions","bonusSystems","isLoggedSubscription","pipe","filter","switchMap","getFavorites","getProfile","getAddresses","getBonuses","getHistory","subscribe","unsubscribe","prototype","signIn","data","post","tap","result","setAuthToken","token","next","get","error","type","deleteAuthToken","getHistoryTransactions","bonusSystem","limit","set","transactions","updateProfile","addAddress","address","deleteAddress","reqBody","id","street","home","signUp","signOut","resetPassword","resetPasswordCode","console","info","addDishToFavorites","dish","dishId","getValue","push","removeDishFromFavorites","length","favoritesUpdated","item","userProfile","userIsLoggedIn","userFavorites","userAddresses","userHistory","userTransactionsHistory","getAuthToken","setItem","removeItem","saveAvatar","avatar","FormData","append","name","headers","Content-Type","i0","ɵɵinject","i1","NetService","factory","ɵfac","providedIn","SignUpDirective","ngRestoUserService","success","EventEmitter","onClick","phone","preparePhone","email","password","captcha","emit","replace","ɵɵdirectiveInject","selectors","hostBindings","rf","ctx","SignInDirective","SignOutDirective","ResetPasswordDirective","ResetPasswordCodeDirective","userId","code","renderer","el","balance","bonuses","state","amount","setProperty","nativeElement","BalanceDirective","Renderer2","ElementRef","ToggleDishToFavoritesDirective","element","addedToFavorites","removedFromFavorites","change","ngOnInit","inFavorites","find","addClass","removeClass","UpdateProfileDirective","additionalInfo","birthday","AddAddressDirective","housing","index","entrance","floor","apartment","doorphone","DeleteAddressDirective","NgUserModule","providers","imports","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { filter, switchMap, tap } from 'rxjs/operators';\r\nimport { NetService } from '@webresto/ng-core/dist';\r\nimport {\r\n  Address, SignInRequestData, SignInResponseData, User, UpdateProfileRequestData,\r\n  UpdateProfileResponseData, AddAddressRequestData, RemoveAddressRequestData, SignUpRequestData,\r\n  ResetPasswordRequestData, ResetPasswordCodeRequestData,\r\n  AddDishToFavoritesRequestData, RemoveDishFromFavoritesRequestData\r\n} from '../../models';\r\n\r\nconst LS_TOKEN_NAME = 'gf:tkn:v2';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgRestoUserService {\r\n\r\n  private authToken: string = localStorage.getItem(LS_TOKEN_NAME);\r\n  private rememberMe: boolean = false;\r\n  private user: BehaviorSubject<any> = new BehaviorSubject({});\r\n  private isLoggedIn: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(this.authToken ? true : false);\r\n  private favorites: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n  private addresses: BehaviorSubject<Address[]> = new BehaviorSubject([]);\r\n  private historyItems: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n  private historyTransactions: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n  private bonusSystems: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\r\n  private isLoggedSubscription = this.isLoggedIn.pipe(\r\n    filter(isLoggedIn => isLoggedIn === true),\r\n    switchMap(() => this.getFavorites()),\r\n    switchMap(() => this.getProfile()),\r\n    switchMap(() => this.getAddresses()),\r\n    switchMap(() => this.getBonuses()),\r\n    switchMap(() => this.getHistory())\r\n  ).subscribe(() => { }, () => { }, () => this.isLoggedSubscription.unsubscribe());\r\n\r\n  constructor(private net: NetService) { }\r\n\r\n  signIn(data: SignInRequestData, rememberMe: boolean = false) {\r\n\r\n    this.rememberMe = rememberMe;\r\n\r\n    return this.net.post('/signin', data).pipe(\r\n      tap(\r\n        (result: SignInResponseData) => {\r\n          this.setAuthToken(result.token);\r\n          this.user.next(result.user);\r\n          this.isLoggedIn.next(true);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n\r\n  }\r\n\r\n  getProfile() {\r\n    return this.net.get('/user/get/user-info').pipe(\r\n      tap(\r\n        (result: User) => {\r\n          this.user.next(result);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  getHistory() {\r\n    return this.net.get('/user/get/history').pipe(\r\n      tap(\r\n        (historyItems) => {\r\n          this.historyItems.next(historyItems);\r\n        },\r\n        error => {\r\n          if (error?.type === \"Unauthorized\") {\r\n            this.deleteAuthToken();\r\n          };\r\n        })\r\n    );\r\n  }\r\n\r\n  getHistoryTransactions(bonusSystem: string = \"local\", limit: number = 15, set: number = 0) {\r\n    return this.net.get(`/bonus/transactions?bonussystem=${bonusSystem}&limit=${limit}&number=${set}`).pipe(\r\n      tap(\r\n        (transactions) => {\r\n          this.historyTransactions.next(transactions);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  updateProfile(data: UpdateProfileRequestData) {\r\n    return this.net.post('/user/set/user-info', {\r\n      user: data\r\n    }).pipe(\r\n      tap(\r\n        (result: UpdateProfileResponseData) => {\r\n          this.user.next(result.user);\r\n        },\r\n        () => { }\r\n      )\r\n    )\r\n  }\r\n\r\n  getAddresses() {\r\n    return this.net.get('/user/get/location').pipe(\r\n      tap(\r\n        (addresses: Address[]) => {\r\n          this.addresses.next(addresses);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  addAddress(address: AddAddressRequestData) {\r\n    return this.net.post('/user/add/location', address).pipe(\r\n      tap(\r\n        (addresses: Address[]) => {\r\n          this.addresses.next(addresses);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  deleteAddress(address: Address) {\r\n    var reqBody: RemoveAddressRequestData = {\r\n      id: address.id,\r\n      street: address.street,\r\n      home: address.home\r\n    };\r\n\r\n    return this.net.post('/user/remove/location', reqBody).pipe(\r\n      tap(\r\n        (addresses: Address[]) => {\r\n          this.addresses.next(addresses);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  signUp(data: SignUpRequestData) {\r\n    return this.net.post('/signup', data).pipe(\r\n      tap(\r\n        (result) => {\r\n          //this.setAuthToken(result.token, false);\r\n          //this.user.next(result.user);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  signOut() {\r\n    return this.deleteAuthToken();\r\n  }\r\n\r\n\r\n  getBonuses() {\r\n    return this.net.post('/bonus/get', {}).pipe(\r\n      tap(\r\n        result => this.bonusSystems.next(result),\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  resetPassword(data: ResetPasswordRequestData) {\r\n    return this.net.post('/reset', data).pipe(\r\n      tap(\r\n        () => { },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  resetPasswordCode(data: ResetPasswordCodeRequestData) {\r\n    return this.net.post('/code', data).pipe(\r\n      tap(\r\n        () => { },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n\r\n  getFavorites() {\r\n    return this.net.get<any[]>('/user/get/favorites').pipe(\r\n      tap(\r\n        result => {\r\n          console.info('getFavorites result', result);\r\n          this.favorites.next(result);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  addDishToFavorites(dish: any) {\r\n    let data: AddDishToFavoritesRequestData = {\r\n      dishId: dish.id\r\n    };\r\n    return this.net.post<AddDishToFavoritesRequestData, any[]>('/user/add/favorites ', data).pipe(\r\n      tap(\r\n        result => {\r\n          let favoritesUpdated: any[] = this.favorites.getValue();\r\n          favoritesUpdated.push(dish);\r\n          this.favorites.next(result);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  removeDishFromFavorites(dish: any) {\r\n    let data: RemoveDishFromFavoritesRequestData = {\r\n      dishId: dish.id\r\n    };\r\n    return this.net.post('/user/remove/favorites ', data).pipe(\r\n      tap(\r\n        (result: any[]) => {\r\n          console.info('Было=>>>', this.favorites.getValue().length);\r\n          let favoritesUpdated: any[] = this.favorites\r\n            .getValue()\r\n            .filter(item => item.id != dish.id);\r\n          console.info('Стало=>>>', favoritesUpdated.length);\r\n          this.favorites.next(result);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  userProfile(): BehaviorSubject<User> {\r\n    return this.user;\r\n  }\r\n\r\n  userIsLoggedIn(): BehaviorSubject<boolean> {\r\n    return this.isLoggedIn;\r\n  }\r\n\r\n  userFavorites(): Observable<any[]> {\r\n    return this.favorites.pipe();\r\n  }\r\n\r\n  userAddresses(): Observable<Address[]> {\r\n    return this.addresses.pipe();\r\n  }\r\n\r\n  userHistory(): Observable<any[]> {\r\n    return this.historyItems.pipe();\r\n  }\r\n  userTransactionsHistory(): Observable<any[]> {\r\n    return this.historyTransactions.pipe();\r\n  }\r\n\r\n  getAuthToken(): string {\r\n    return this.authToken;\r\n  }\r\n\r\n  setAuthToken(authToken: string): void {\r\n    if (this.rememberMe) {\r\n      localStorage.setItem(LS_TOKEN_NAME, authToken);\r\n    };\r\n    this.authToken = authToken;\r\n    this.isLoggedIn.next(true);\r\n    /*if(updateProfile) {\r\n      this.getProfile().subscribe();\r\n      this.getFavorites().subscribe();\r\n      this.getAddresses().subscribe();\r\n      this.getHistory().subscribe();\r\n    }*/\r\n  }\r\n\r\n  deleteAuthToken(): void {\r\n    this.authToken = null;\r\n    localStorage.removeItem(LS_TOKEN_NAME);\r\n    this.isLoggedIn.next(false);\r\n  }\r\n\r\n  saveAvatar(avatar: File) {\r\n    const data = new FormData();\r\n    data.append('avatar', avatar, avatar.name);\r\n    return this.net.post('/user/avatar/upload', data, true, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    }).pipe(\r\n      tap(\r\n        result => this.user.next(result.user),\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { SignUpRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstSignUp]'\r\n})\r\nexport class SignUpDirective {\r\n\r\n  @Input() name:string;\r\n  @Input() phone:string;\r\n  @Input() email:string;\r\n  @Input() password:string;\r\n  @Input() captcha:string;\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:SignUpRequestData = {\r\n      name: this.name,\r\n      phone: this.preparePhone(this.phone),\r\n      email: this.email,\r\n      password: this.password,\r\n      captcha: this.captcha\r\n    };\r\n    this.ngRestoUserService\r\n      .signUp(data)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n\r\n  preparePhone(phone) {\r\n    phone = '+' + phone.replace(/[^0-9]/gim,'');\r\n    return phone.replace('+8', '');\r\n  }\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { SignInRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstSignIn]'\r\n})\r\nexport class SignInDirective {\r\n\r\n  @Input() phone:string;\r\n  @Input() password:string;\r\n  @Input() captcha:string;\r\n  @Input() rememberMe:boolean;\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:SignInRequestData = {\r\n      phone: this.preparePhone(this.phone),\r\n      password: this.password,\r\n      captcha: this.captcha\r\n    };\r\n    this.ngRestoUserService\r\n      .signIn(data, this.rememberMe)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      )\r\n  }\r\n\r\n  preparePhone(phone) {\r\n    phone = '+' + phone.replace(/[^0-9]/gim,'');\r\n    return phone.replace('+8', '');\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstSignOut]'\r\n})\r\nexport class SignOutDirective {\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    this.ngRestoUserService.signOut();\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ResetPasswordRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstResetPassword]'\r\n})\r\nexport class ResetPasswordDirective {\r\n\r\n  @Input() phone:string;\r\n  @Input() captcha:string;\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:ResetPasswordRequestData = {\r\n      phone: this.phone,\r\n      captcha: this.captcha\r\n    };\r\n    this.ngRestoUserService\r\n      .resetPassword(data)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ResetPasswordCodeRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstResetPasswordCode]'\r\n})\r\nexport class ResetPasswordCodeDirective {\r\n\r\n  @Input() userId:string;\r\n  @Input() code:string;\r\n  @Input() password:string;\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:ResetPasswordCodeRequestData = {\r\n      userId: this.userId,\r\n      code: this.code,\r\n      password: this.password\r\n    };\r\n    this.ngRestoUserService\r\n      .resetPasswordCode(data)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n\r\n}\r\n","import { Directive, Renderer2, ElementRef } from '@angular/core';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstBalance]'\r\n})\r\nexport class BalanceDirective {\r\n\r\n  amount:string;\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private el: ElementRef,\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) {\r\n    let balance = 0;\r\n    this.ngRestoUserService\r\n      .getBonuses()\r\n      .subscribe(bonuses => {\r\n        for(let name in bonuses) {\r\n          const data = bonuses[name];\r\n          if(data.state == 'active') {\r\n            balance += data.balance;\r\n          }\r\n        }\r\n\r\n        this.amount = `${balance}`;\r\n        this.renderer.setProperty(this.el.nativeElement, 'innerHTML', this.amount);\r\n      });\r\n\r\n  }\r\n\r\n}\r\n","import {\r\n  Directive, HostListener, Input,\r\n  Output, EventEmitter, ElementRef, Renderer2\r\n} from '@angular/core';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstToggleDishToFavorites]'\r\n})\r\nexport class ToggleDishToFavoritesDirective {\r\n\r\n  @Input() dish:any;\r\n  @Output() addedToFavorites = new EventEmitter<void>();\r\n  @Output() removedFromFavorites = new EventEmitter<void>();\r\n  @Output() change = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  inFavorites: boolean;\r\n  isLoggedIn: boolean;\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService,\r\n    private element: ElementRef,\r\n    private renderer: Renderer2\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.ngRestoUserService\r\n      .userFavorites()\r\n      .subscribe(favorites => {\r\n\r\n        this.inFavorites = favorites.find(dish => dish.id == this.dish.id);\r\n\r\n        if(this.inFavorites) {\r\n          this.renderer.addClass(this.element.nativeElement, 'selected')\r\n        } else {\r\n          this.renderer.removeClass(this.element.nativeElement, 'selected');\r\n        }\r\n      });\r\n    this.ngRestoUserService\r\n      .userIsLoggedIn()\r\n      .subscribe(result => this.isLoggedIn = result);\r\n  }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    if(this.inFavorites) {\r\n      this.removeDishFromFavorites();\r\n    } else {\r\n      this.addDishToFavorites();\r\n    }\r\n  }\r\n\r\n  addDishToFavorites() {\r\n    this.ngRestoUserService\r\n      .addDishToFavorites(this.dish)\r\n      .subscribe(\r\n        () => {\r\n          this.addedToFavorites.emit();\r\n          this.change.emit(true);\r\n          this.renderer.addClass(this.element.nativeElement, 'selected');\r\n        },\r\n        error => this.error.emit(error)\r\n      )\r\n  }\r\n\r\n  removeDishFromFavorites() {\r\n    this.ngRestoUserService\r\n      .removeDishFromFavorites(this.dish)\r\n      .subscribe(\r\n        () => {\r\n          this.removedFromFavorites.emit();\r\n          this.change.emit(false);\r\n          this.renderer.removeClass(this.element.nativeElement, 'selected');\r\n        },\r\n        error => this.error.emit(error)\r\n      )\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { UpdateProfileRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstUpdateProfile]'\r\n})\r\nexport class UpdateProfileDirective {\r\n\r\n  @Input() name:string;\r\n  @Input() phone:string;\r\n  @Input() email:string;\r\n  @Input() additionalInfo:string;\r\n  @Input() birthday:string;\r\n\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:UpdateProfileRequestData = {\r\n      name: this.name,\r\n      //phone: this.phone,\r\n      email: this.email,\r\n      additionalInfo:this.additionalInfo,\r\n      birthday:this.birthday\r\n    };\r\n    this.ngRestoUserService\r\n      .updateProfile(data)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { AddAddressRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstAddAddress]'\r\n})\r\nexport class AddAddressDirective {\r\n\r\n  @Input() street:string;     //required\r\n  @Input() home:string;       //required\r\n  @Input() name:string;\r\n  @Input() housing:string;\r\n  @Input() index:string;\r\n  @Input() entrance:string;\r\n  @Input() floor:string;\r\n  @Input() apartment:string;\r\n  @Input() doorphone:string;\r\n\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    if(!this.street) {\r\n      this.error.emit('Необходимо указать улицу'); return;\r\n    }\r\n    if(!this.home) {\r\n      this.error.emit('Необходимо указать номер дома'); return;\r\n    }\r\n\r\n    let data:AddAddressRequestData = {\r\n      street: this.street,\r\n      home: this.home,\r\n      name: this.name || '',\r\n      housing: this.housing || '',\r\n      index: this.index || '',\r\n      entrance: this.entrance || '',\r\n      floor: this.floor || '',\r\n      apartment: this.apartment || '',\r\n      doorphone: this.doorphone || ''\r\n    };\r\n    this.ngRestoUserService\r\n      .addAddress(data)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Address } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstDeleteAddress]'\r\n})\r\nexport class DeleteAddressDirective {\r\n\r\n  @Input() address:Address;\r\n\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    this.ngRestoUserService\r\n      .deleteAddress(this.address)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SignUpDirective } from './directives/sign-up.directive';\r\nimport { SignInDirective } from './directives/sign-in.directive';\r\nimport { SignOutDirective } from './directives/sign-out.directive';\r\nimport { ResetPasswordDirective } from './directives/reset-password.directive';\r\nimport { ResetPasswordCodeDirective } from './directives/reset-password-code.directive';\r\nimport { BalanceDirective } from './directives/balance.directive';\r\nimport { ToggleDishToFavoritesDirective } from './directives/toggle-dish-to-favorites.directive';\r\nimport { UpdateProfileDirective } from './directives/update-profile.directive';\r\nimport { AddAddressDirective } from \"./directives/add-address.directive\";\r\nimport { DeleteAddressDirective } from \"./directives/delete-address.directive\";\r\n\r\n@NgModule({\r\n  imports: [],\r\n  providers: [],\r\n  declarations: [\r\n    SignUpDirective,\r\n    SignInDirective,\r\n    SignOutDirective,\r\n    ResetPasswordDirective,\r\n    ResetPasswordCodeDirective,\r\n    BalanceDirective,\r\n    ToggleDishToFavoritesDirective,\r\n    UpdateProfileDirective,\r\n    AddAddressDirective,\r\n    DeleteAddressDirective\r\n  ],\r\n  exports: [\r\n    SignUpDirective,\r\n    SignInDirective,\r\n    SignOutDirective,\r\n    ResetPasswordDirective,\r\n    ResetPasswordCodeDirective,\r\n    BalanceDirective,\r\n    ToggleDishToFavoritesDirective,\r\n    UpdateProfileDirective,\r\n    AddAddressDirective,\r\n    DeleteAddressDirective\r\n  ]\r\n})\r\nexport class NgUserModule { }\r\n"]}