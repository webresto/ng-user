{"version":3,"sources":["../esm2015/projects/webresto/ng-user/src/lib/services/ng-resto-user.service.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/sign-up.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/sign-in.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/sign-out.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/reset-password.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/reset-password-code.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/balance.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/toggle-dish-to-favorites.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/update-profile.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/add-address.directive.ts","../esm2015/projects/webresto/ng-user/src/lib/directives/delete-address.directive.ts","../projects/webresto/ng-user/src/lib/ng-user.module.ts"],"names":["LS_TOKEN_NAME","NgRestoUserService","net","_this","this","authToken","localStorage","getItem","rememberMe","user","BehaviorSubject","isLoggedIn","favorites","addresses","historyItems","historyTransactions","bonusSystems","isLoggedSubscription","pipe","filter","switchMap","getFavorites","getProfile","getAddresses","getBonuses","subscribe","unsubscribe","prototype","signIn","data","post","tap","result","setAuthToken","token","next","get","getHistory","error","type","deleteAuthToken","getHistoryTransactions","bonusSystem","limit","set","transactions","updateProfile","addAddress","address","deleteAddress","reqBody","id","street","home","signUp","signOut","resetPassword","resetPasswordCode","console","info","addDishToFavorites","dish","dishId","getValue","push","removeDishFromFavorites","length","favoritesUpdated","item","userProfile","value","userIsLoggedIn","userFavorites","userAddresses","userHistory","userTransactionsHistory","getAuthToken","setItem","removeItem","saveAvatar","avatar","FormData","append","name","headers","Content-Type","Injectable","args","providedIn","NetService","SignUpDirective","ngRestoUserService","success","EventEmitter","onClick","phone","preparePhone","email","password","captcha","emit","replace","Directive","selector","Input","Output","HostListener","SignInDirective","SignOutDirective","ResetPasswordDirective","ResetPasswordCodeDirective","userId","code","renderer","el","balance","bonuses","state","amount","setProperty","nativeElement","Renderer2","ElementRef","ToggleDishToFavoritesDirective","element","addedToFavorites","removedFromFavorites","change","ngOnInit","inFavorites","find","addClass","removeClass","UpdateProfileDirective","additionalInfo","birthday","formatDate","AddAddressDirective","housing","index","entrance","floor","apartment","doorphone","DeleteAddressDirective","NgModule","imports","providers","declarations","BalanceDirective","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { filter, switchMap, tap } from 'rxjs/operators';\r\nimport { NetService } from '@webresto/ng-core';\r\nimport {\r\n  Address, SignInRequestData, SignInResponseData, User, UpdateProfileRequestData,\r\n  UpdateProfileResponseData, AddAddressRequestData, RemoveAddressRequestData, SignUpRequestData,\r\n  ResetPasswordRequestData, ResetPasswordCodeRequestData,\r\n  AddDishToFavoritesRequestData, RemoveDishFromFavoritesRequestData\r\n} from '../../models';\r\n\r\nconst LS_TOKEN_NAME = 'gf:tkn:v2';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgRestoUserService {\r\n\r\n  private authToken: string = localStorage.getItem(LS_TOKEN_NAME);\r\n  private rememberMe: boolean = false;\r\n  private user: BehaviorSubject<any> = new BehaviorSubject(null);\r\n  private isLoggedIn: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(this.authToken ? true : false);\r\n  private favorites: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n  private addresses: BehaviorSubject<Address[]> = new BehaviorSubject([]);\r\n  private historyItems: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n  private historyTransactions: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n  private bonusSystems: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\r\n\r\n  constructor(private net: NetService) {\r\n    const isLoggedSubscription = this.isLoggedIn.pipe(\r\n      filter(isLoggedIn => !!isLoggedIn),\r\n      switchMap(() => this.getFavorites()),\r\n      switchMap(() => this.getProfile()),\r\n      switchMap(() => this.getAddresses()),\r\n      switchMap(() => this.getBonuses()),\r\n    ).subscribe(() => { }, () => { }, () => isLoggedSubscription.unsubscribe()\r\n    );\r\n  }\r\n\r\n  signIn(data: SignInRequestData, rememberMe: boolean = false) {\r\n\r\n    this.rememberMe = rememberMe;\r\n\r\n    return this.net.post('/signin', data).pipe(\r\n      tap(\r\n        (result: SignInResponseData) => {\r\n          this.setAuthToken(result.token);\r\n          this.user.next(result.user);\r\n          this.isLoggedIn.next(true);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n\r\n  }\r\n\r\n  getProfile() {\r\n    return this.net.get('/user/get/user-info').pipe(\r\n      tap(\r\n        (result: User) => {\r\n          this.user.next(result);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  getHistory() {\r\n    return this.net.get('/user/get/history').pipe(\r\n      tap(\r\n        (historyItems) => {\r\n          this.historyItems.next(historyItems);\r\n        },\r\n        error => {\r\n          if (error?.type === \"Unauthorized\") {\r\n            this.deleteAuthToken();\r\n          };\r\n        })\r\n    );\r\n  }\r\n\r\n  getHistoryTransactions(bonusSystem: string = \"local\", limit: number = 15, set: number = 0) {\r\n    return this.net.get(`/bonus/transactions?bonussystem=${bonusSystem}&limit=${limit}&number=${set}`).pipe(\r\n      tap(\r\n        (transactions) => {\r\n          this.historyTransactions.next(transactions);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  updateProfile(data: UpdateProfileRequestData) {\r\n    return this.net.post('/user/set/user-info', {\r\n      user: data\r\n    }).pipe(\r\n      tap(\r\n        (result: UpdateProfileResponseData) => {\r\n          this.user.next(result.user);\r\n        },\r\n        () => { }\r\n      )\r\n    )\r\n  }\r\n\r\n  getAddresses() {\r\n    return this.net.get('/user/get/location').pipe(\r\n      tap(\r\n        (addresses: Address[]) => {\r\n          this.addresses.next(addresses);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  addAddress(address: AddAddressRequestData) {\r\n    return this.net.post('/user/add/location', address).pipe(\r\n      tap(\r\n        (addresses: Address[]) => {\r\n          this.addresses.next(addresses);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  deleteAddress(address: Address) {\r\n    var reqBody: RemoveAddressRequestData = {\r\n      id: address.id,\r\n      street: address.street,\r\n      home: address.home\r\n    };\r\n\r\n    return this.net.post('/user/remove/location', reqBody).pipe(\r\n      tap(\r\n        (addresses: Address[]) => {\r\n          this.addresses.next(addresses);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  signUp(data: SignUpRequestData) {\r\n    return this.net.post('/signup', data).pipe(\r\n      tap(\r\n        (result) => {\r\n          //this.setAuthToken(result.token, false);\r\n          //this.user.next(result.user);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  signOut() {\r\n    return this.deleteAuthToken();\r\n  }\r\n\r\n\r\n  getBonuses() {\r\n    return this.net.post('/bonus/get', {}).pipe(\r\n      tap(\r\n        result => this.bonusSystems.next(result),\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  resetPassword(data: ResetPasswordRequestData) {\r\n    return this.net.post('/reset', data).pipe(\r\n      tap(\r\n        () => { },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  resetPasswordCode(data: ResetPasswordCodeRequestData) {\r\n    return this.net.post('/code', data).pipe(\r\n      tap(\r\n        () => { },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n\r\n  getFavorites() {\r\n    return this.net.get<any[]>('/user/get/favorites').pipe(\r\n      tap(\r\n        result => {\r\n          console.info('getFavorites result', result);\r\n          this.favorites.next(result);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  addDishToFavorites(dish: any) {\r\n    let data: AddDishToFavoritesRequestData = {\r\n      dishId: dish.id\r\n    };\r\n    return this.net.post<AddDishToFavoritesRequestData, any[]>('/user/add/favorites ', data).pipe(\r\n      tap(\r\n        result => {\r\n          let favoritesUpdated: any[] = this.favorites.getValue();\r\n          favoritesUpdated.push(dish);\r\n          this.favorites.next(result);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  removeDishFromFavorites(dish: any) {\r\n    let data: RemoveDishFromFavoritesRequestData = {\r\n      dishId: dish.id\r\n    };\r\n    return this.net.post('/user/remove/favorites ', data).pipe(\r\n      tap(\r\n        (result: any[]) => {\r\n          console.info('Было=>>>', this.favorites.getValue().length);\r\n          let favoritesUpdated: any[] = this.favorites\r\n            .getValue()\r\n            .filter(item => item.id != dish.id);\r\n          console.info('Стало=>>>', favoritesUpdated.length);\r\n          this.favorites.next(result);\r\n        },\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n\r\n  userProfile(): Observable<User> {\r\n    return !!this.user.value ? this.user : this.getProfile().pipe(\r\n      switchMap(() => this.getProfile()),\r\n      switchMap(() => this.getFavorites()),\r\n      switchMap(() => this.getAddresses()),\r\n      switchMap(() => this.getBonuses()),\r\n      switchMap(() => this.user)\r\n    );\r\n  }\r\n\r\n  userIsLoggedIn(): BehaviorSubject<boolean> {\r\n    return this.isLoggedIn;\r\n  }\r\n\r\n  userFavorites(): Observable<any[]> {\r\n    return this.favorites.pipe();\r\n  }\r\n\r\n  userAddresses(): Observable<Address[]> {\r\n    return this.addresses.pipe();\r\n  }\r\n\r\n  userHistory(): Observable<any[]> {\r\n    return this.historyItems.pipe();\r\n  }\r\n  userTransactionsHistory(): Observable<any[]> {\r\n    return this.historyTransactions.pipe();\r\n  }\r\n\r\n  getAuthToken(): string {\r\n    return this.authToken;\r\n  }\r\n\r\n  setAuthToken(authToken: string): void {\r\n    if (this.rememberMe) {\r\n      localStorage.setItem(LS_TOKEN_NAME, authToken);\r\n    };\r\n    this.authToken = authToken;\r\n    this.isLoggedIn.next(true);\r\n    /*if(updateProfile) {\r\n      this.getProfile().subscribe();\r\n      this.getFavorites().subscribe();\r\n      this.getAddresses().subscribe();\r\n      this.getHistory().subscribe();\r\n    }*/\r\n  }\r\n\r\n  deleteAuthToken(): void {\r\n    this.authToken = null;\r\n    localStorage.removeItem(LS_TOKEN_NAME);\r\n    this.isLoggedIn.next(false);\r\n  }\r\n\r\n  saveAvatar(avatar: File) {\r\n    const data = new FormData();\r\n    data.append('avatar', avatar, avatar.name);\r\n    return this.net.post('/user/avatar/upload', data, true, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    }).pipe(\r\n      tap(\r\n        result => this.user.next(result.user),\r\n        () => { }\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { SignUpRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstSignUp]'\r\n})\r\nexport class SignUpDirective {\r\n\r\n  @Input() name:string;\r\n  @Input() phone:string;\r\n  @Input() email:string;\r\n  @Input() password:string;\r\n  @Input() captcha:string;\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:SignUpRequestData = {\r\n      name: this.name,\r\n      phone: this.preparePhone(this.phone),\r\n      email: this.email,\r\n      password: this.password,\r\n      captcha: this.captcha\r\n    };\r\n    this.ngRestoUserService\r\n      .signUp(data)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n\r\n  preparePhone(phone) {\r\n    phone = '+' + phone.replace(/[^0-9]/gim,'');\r\n    return phone.replace('+8', '');\r\n  }\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { SignInRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstSignIn]'\r\n})\r\nexport class SignInDirective {\r\n\r\n  @Input() phone:string;\r\n  @Input() password:string;\r\n  @Input() captcha:string;\r\n  @Input() rememberMe:boolean;\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:SignInRequestData = {\r\n      phone: this.preparePhone(this.phone),\r\n      password: this.password,\r\n      captcha: this.captcha\r\n    };\r\n    this.ngRestoUserService\r\n      .signIn(data, this.rememberMe)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      )\r\n  }\r\n\r\n  preparePhone(phone) {\r\n    phone = '+' + phone.replace(/[^0-9]/gim,'');\r\n    return phone.replace('+8', '');\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstSignOut]'\r\n})\r\nexport class SignOutDirective {\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    this.ngRestoUserService.signOut();\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ResetPasswordRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstResetPassword]'\r\n})\r\nexport class ResetPasswordDirective {\r\n\r\n  @Input() phone:string;\r\n  @Input() captcha:string;\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:ResetPasswordRequestData = {\r\n      phone: this.phone,\r\n      captcha: this.captcha\r\n    };\r\n    this.ngRestoUserService\r\n      .resetPassword(data)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ResetPasswordCodeRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstResetPasswordCode]'\r\n})\r\nexport class ResetPasswordCodeDirective {\r\n\r\n  @Input() userId:string;\r\n  @Input() code:string;\r\n  @Input() password:string;\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:ResetPasswordCodeRequestData = {\r\n      userId: this.userId,\r\n      code: this.code,\r\n      password: this.password\r\n    };\r\n    this.ngRestoUserService\r\n      .resetPasswordCode(data)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n\r\n}\r\n","import { Directive, Renderer2, ElementRef } from '@angular/core';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstBalance]'\r\n})\r\nexport class BalanceDirective {\r\n\r\n  amount:string;\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private el: ElementRef,\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) {\r\n    let balance = 0;\r\n    this.ngRestoUserService\r\n      .getBonuses()\r\n      .subscribe(bonuses => {\r\n        for(let name in bonuses) {\r\n          const data = bonuses[name];\r\n          if(data.state == 'active') {\r\n            balance += data.balance;\r\n          }\r\n        }\r\n\r\n        this.amount = `${balance}`;\r\n        this.renderer.setProperty(this.el.nativeElement, 'innerHTML', this.amount);\r\n      });\r\n\r\n  }\r\n\r\n}\r\n","import {\r\n  Directive, HostListener, Input,\r\n  Output, EventEmitter, ElementRef, Renderer2\r\n} from '@angular/core';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstToggleDishToFavorites]'\r\n})\r\nexport class ToggleDishToFavoritesDirective {\r\n\r\n  @Input() dish:any;\r\n  @Output() addedToFavorites = new EventEmitter<void>();\r\n  @Output() removedFromFavorites = new EventEmitter<void>();\r\n  @Output() change = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  inFavorites: boolean;\r\n  isLoggedIn: boolean;\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService,\r\n    private element: ElementRef,\r\n    private renderer: Renderer2\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.ngRestoUserService\r\n      .userFavorites()\r\n      .subscribe(favorites => {\r\n\r\n        this.inFavorites = favorites.find(dish => dish.id == this.dish.id);\r\n\r\n        if(this.inFavorites) {\r\n          this.renderer.addClass(this.element.nativeElement, 'selected')\r\n        } else {\r\n          this.renderer.removeClass(this.element.nativeElement, 'selected');\r\n        }\r\n      });\r\n    this.ngRestoUserService\r\n      .userIsLoggedIn()\r\n      .subscribe(result => this.isLoggedIn = result);\r\n  }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    if(this.inFavorites) {\r\n      this.removeDishFromFavorites();\r\n    } else {\r\n      this.addDishToFavorites();\r\n    }\r\n  }\r\n\r\n  addDishToFavorites() {\r\n    this.ngRestoUserService\r\n      .addDishToFavorites(this.dish)\r\n      .subscribe(\r\n        () => {\r\n          this.addedToFavorites.emit();\r\n          this.change.emit(true);\r\n          this.renderer.addClass(this.element.nativeElement, 'selected');\r\n        },\r\n        error => this.error.emit(error)\r\n      )\r\n  }\r\n\r\n  removeDishFromFavorites() {\r\n    this.ngRestoUserService\r\n      .removeDishFromFavorites(this.dish)\r\n      .subscribe(\r\n        () => {\r\n          this.removedFromFavorites.emit();\r\n          this.change.emit(false);\r\n          this.renderer.removeClass(this.element.nativeElement, 'selected');\r\n        },\r\n        error => this.error.emit(error)\r\n      )\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { UpdateProfileRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\nimport { formatDate } from '@angular/common';\r\n\r\n@Directive({\r\n  selector: '[rstUpdateProfile]'\r\n})\r\nexport class UpdateProfileDirective {\r\n\r\n  @Input() name:string;\r\n  @Input() phone:string;\r\n  @Input() email:string;\r\n  @Input() additionalInfo:string;\r\n  @Input() birthday:string;\r\n\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    let data:UpdateProfileRequestData = {\r\n      name: this.name,\r\n      //phone: this.phone,\r\n      email: this.email,\r\n      additionalInfo:this.additionalInfo,\r\n      birthday:this.birthday ? formatDate(this.birthday,'yyyy-MM-dd','en') : this.birthday\r\n    };\r\n    this.ngRestoUserService\r\n      .updateProfile(data)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { AddAddressRequestData } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstAddAddress]'\r\n})\r\nexport class AddAddressDirective {\r\n\r\n  @Input() street:string;     //required\r\n  @Input() home:string;       //required\r\n  @Input() name:string;\r\n  @Input() housing:string;\r\n  @Input() index:string;\r\n  @Input() entrance:string;\r\n  @Input() floor:string;\r\n  @Input() apartment:string;\r\n  @Input() doorphone:string;\r\n\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    if(!this.street) {\r\n      this.error.emit('Необходимо указать улицу'); return;\r\n    }\r\n    if(!this.home) {\r\n      this.error.emit('Необходимо указать номер дома'); return;\r\n    }\r\n\r\n    let data:AddAddressRequestData = {\r\n      street: this.street,\r\n      home: this.home,\r\n      name: this.name || '',\r\n      housing: this.housing || '',\r\n      index: this.index || '',\r\n      entrance: this.entrance || '',\r\n      floor: this.floor || '',\r\n      apartment: this.apartment || '',\r\n      doorphone: this.doorphone || ''\r\n    };\r\n    this.ngRestoUserService\r\n      .addAddress(data)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n}\r\n","import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Address } from '../../models';\r\nimport { NgRestoUserService } from '../services/ng-resto-user.service';\r\n\r\n@Directive({\r\n  selector: '[rstDeleteAddress]'\r\n})\r\nexport class DeleteAddressDirective {\r\n\r\n  @Input() address:Address;\r\n\r\n  @Output() success = new EventEmitter<boolean>();\r\n  @Output() error = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private ngRestoUserService: NgRestoUserService\r\n  ) { }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    this.ngRestoUserService\r\n      .deleteAddress(this.address)\r\n      .subscribe(\r\n        () => this.success.emit(true),\r\n        error => this.error.emit(error)\r\n      );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SignUpDirective } from './directives/sign-up.directive';\r\nimport { SignInDirective } from './directives/sign-in.directive';\r\nimport { SignOutDirective } from './directives/sign-out.directive';\r\nimport { ResetPasswordDirective } from './directives/reset-password.directive';\r\nimport { ResetPasswordCodeDirective } from './directives/reset-password-code.directive';\r\nimport { BalanceDirective } from './directives/balance.directive';\r\nimport { ToggleDishToFavoritesDirective } from './directives/toggle-dish-to-favorites.directive';\r\nimport { UpdateProfileDirective } from './directives/update-profile.directive';\r\nimport { AddAddressDirective } from \"./directives/add-address.directive\";\r\nimport { DeleteAddressDirective } from \"./directives/delete-address.directive\";\r\n\r\n@NgModule({\r\n  imports: [],\r\n  providers: [],\r\n  declarations: [\r\n    SignUpDirective,\r\n    SignInDirective,\r\n    SignOutDirective,\r\n    ResetPasswordDirective,\r\n    ResetPasswordCodeDirective,\r\n    BalanceDirective,\r\n    ToggleDishToFavoritesDirective,\r\n    UpdateProfileDirective,\r\n    AddAddressDirective,\r\n    DeleteAddressDirective\r\n  ],\r\n  exports: [\r\n    SignUpDirective,\r\n    SignInDirective,\r\n    SignOutDirective,\r\n    ResetPasswordDirective,\r\n    ResetPasswordCodeDirective,\r\n    BalanceDirective,\r\n    ToggleDishToFavoritesDirective,\r\n    UpdateProfileDirective,\r\n    AddAddressDirective,\r\n    DeleteAddressDirective\r\n  ]\r\n})\r\nexport class NgUserModule { }\r\n"]}